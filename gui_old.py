"""
GUI –≤–µ—Ä—Å–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PyQt6.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- Drag & Drop –∑–æ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
- –°–ª–∞–π–¥–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∂–∞—Ç–∏—è (0-100)
- –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (HEIF, WebP, AVIF)
- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    pip install PyQt6 Pillow pillow-heif pillow-avif-plugin
"""

import os
import sys
from typing import List, Optional
from pathlib import Path
from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QVBoxLayout,
    QHBoxLayout,
    QWidget,
    QLabel,
    QSlider,
    QRadioButton,
    QButtonGroup,
    QProgressBar,
    QTextEdit,
    QPushButton,
    QFrame,
    QGroupBox,
    QFileDialog,
    QMessageBox,
    QSpacerItem,
    QSizePolicy,
    QLineEdit,
    QCheckBox,
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QMimeData, QUrl, QTimer
from PyQt6.QtGui import QFont, QPalette, QColor, QDragEnterEvent, QDropEvent

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
from classes import ImageCompressor
from pillow_heif import register_heif_opener
from pillow_heif import register_heif_opener


class CompressionWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI."""

    progress_updated = pyqtSignal(int)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    file_processed = pyqtSignal(str)  # –ò–º—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    log_message = pyqtSignal(str)  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
    finished_processing = pyqtSignal(int, int)  # —É—Å–ø–µ—à–Ω—ã—Ö, –æ—à–∏–±–æ–∫

    def __init__(self, files: List[str], quality: int, format_type: str, delete_original: bool = False, postfix: str = "_compressed"):
        super().__init__()
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.files = list(set(files))
        self.quality = quality
        self.format_type = format_type
        self.delete_original = delete_original
        self.postfix = postfix
        self.is_cancelled = False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        successful = 0
        errors = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—â–µ —Ä–∞–∑ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        original_count = len(self.files)
        unique_files = list(dict.fromkeys(self.files))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        total_files = len(unique_files)

        if original_count != total_files:
            duplicates_count = original_count - total_files
            self.log_message.emit(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HEIF –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            register_heif_opener()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
            compressor = ImageCompressor(
                quality=self.quality, output_format=self.format_type
            )

            for i, file_path in enumerate(unique_files):
                if self.is_cancelled:
                    break

                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
                    input_path = Path(file_path)
                    extension = compressor.output_formats[self.format_type]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    input_extension = input_path.suffix.lower()
                    output_extension = extension.lower()
                    
                    if input_extension == output_extension and not self.delete_original:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—Ñ–∏–∫—Å –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
                        base_name = input_path.stem
                        output_path = input_path.parent / f"{base_name}{self.postfix}{extension}"
                    else:
                        output_path = input_path.with_suffix(extension)

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    self.log_message.emit(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {input_path}")
                    self.log_message.emit(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É
                    output_dir = output_path.parent
                    if not os.access(output_dir, os.W_OK):
                        raise PermissionError(
                            f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É: {output_dir}"
                        )

                    # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    compressor.compress_image(str(input_path), str(output_path))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                    if output_path.exists():
                        original_size = input_path.stat().st_size
                        compressed_size = output_path.stat().st_size
                        saved_bytes = original_size - compressed_size
                        saved_percent = (
                            (saved_bytes / original_size) * 100
                            if original_size > 0
                            else 0
                        )

                        if saved_percent > 0:
                            self.log_message.emit(
                                f"‚úÖ {input_path.name} -> {output_path.name}"
                            )
                            self.log_message.emit(
                                f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {saved_bytes:,} –±–∞–π—Ç ({saved_percent:.1f}%)"
                            )
                        else:
                            self.log_message.emit(
                                f"‚úÖ {input_path.name} -> {output_path.name} (—Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–∏–ª—Å—è)"
                            )

                        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                        if self.delete_original and input_path != output_path:
                            try:
                                input_path.unlink()
                                self.log_message.emit(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {input_path.name}")
                            except Exception as e:
                                self.log_message.emit(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª {input_path.name}: {str(e)}")

                        successful += 1
                    else:
                        raise FileNotFoundError(
                            f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: {output_path}"
                        )

                    self.file_processed.emit(input_path.name)

                except Exception as e:
                    errors += 1
                    self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ {Path(file_path).name}: {str(e)}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int(((i + 1) / total_files) * 100)
                self.progress_updated.emit(progress)

        except Exception as e:
            self.log_message.emit(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

        self.finished_processing.emit(successful, errors)

    def cancel(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É."""
        self.is_cancelled = True


class DropZone(QFrame):
    """–í–∏–¥–∂–µ—Ç –∑–æ–Ω—ã drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤."""

    files_dropped = pyqtSignal(list)  # –°–∏–≥–Ω–∞–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤

    def __init__(self):
        super().__init__()
        self.setAcceptDrops(True)
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–æ–Ω—ã."""
        self.setFrameStyle(QFrame.Shape.Box)
        self.setLineWidth(2)
        self.setMinimumHeight(150)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setStyleSheet(
            """
            QFrame {
                border: 2px dashed #cccccc;
                border-radius: 10px;
                background-color: #f9f9f9;
            }
            QFrame:hover {
                border-color: #0078d4;
                background-color: #f0f8ff;
            }
        """
        )

        # –õ–µ–π–±–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        layout = QVBoxLayout()
        self.label = QLabel(
            "üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
        )
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.label.setFont(QFont("Arial", 12))
        self.label.setStyleSheet(
            "color: #666666; border: none; background: transparent;"
        )

        layout.addWidget(self.label)
        self.setLayout(layout)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.mousePressEvent = self.open_file_dialog

    def dragEnterEvent(self, event: QDragEnterEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è."""
        if event.mimeData().hasUrls():
            event.accept()
            self.setStyleSheet(
                """
                QFrame {
                    border: 2px dashed #0078d4;
                    border-radius: 10px;
                    background-color: #e6f3ff;
                }
            """
            )
        else:
            event.ignore()

    def dragLeaveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è."""
        self.setStyleSheet(
            """
            QFrame {
                border: 2px dashed #cccccc;
                border-radius: 10px;
                background-color: #f9f9f9;
            }
        """
        )

    def dropEvent(self, event: QDropEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤."""
        files = []
        for url in event.mimeData().urls():
            file_path = url.toLocalFile()
            if os.path.exists(file_path):
                files.append(file_path)

        if files:
            self.files_dropped.emit(files)
            # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º label –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handle_dropped_files

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å
        self.dragLeaveEvent(event)

    def open_file_dialog(self, event):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤."""
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.FileMode.ExistingFiles)
        file_dialog.setNameFilter(
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.jpg *.jpeg *.png *.heic *.heif *.avif);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )

        if file_dialog.exec():
            files = file_dialog.selectedFiles()
            if files:
                self.files_dropped.emit(files)
                # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º label –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç handle_dropped_files


class ImageCompressorGUI(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ GUI –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    def __init__(self):
        super().__init__()
        self.files_to_process = []
        self.worker = None
        self.init_ui()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.setWindowTitle("üñºÔ∏è –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.setMinimumSize(600, 700)
        self.resize(800, 700)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üñºÔ∏è –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        title.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("color: #2c3e50; margin: 10px;")
        main_layout.addWidget(title)

        # –ó–æ–Ω–∞ drag & drop
        self.drop_zone = DropZone()
        self.drop_zone.files_dropped.connect(self.handle_dropped_files)
        main_layout.addWidget(self.drop_zone)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è
        settings_group = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è")
        settings_layout = QVBoxLayout(settings_group)

        # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
        quality_layout = QHBoxLayout()
        quality_layout.addWidget(QLabel("üéõÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ:"))

        self.quality_slider = QSlider(Qt.Orientation.Horizontal)
        self.quality_slider.setRange(1, 100)
        self.quality_slider.setValue(80)
        self.quality_slider.valueChanged.connect(self.update_quality_label)

        self.quality_label = QLabel("80")
        self.quality_label.setMinimumWidth(30)
        self.quality_label.setStyleSheet("font-weight: bold; color: #2c3e50;")

        quality_layout.addWidget(self.quality_slider)
        quality_layout.addWidget(self.quality_label)
        settings_layout.addLayout(quality_layout)

        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
        format_layout = QHBoxLayout()
        format_layout.addWidget(QLabel("üìã –§–æ—Ä–º–∞—Ç:"))

        self.format_group = QButtonGroup()
        self.heif_radio = QRadioButton("HEIF (.heic)")
        self.webp_radio = QRadioButton("WebP (.webp)")
        self.avif_radio = QRadioButton("AVIF (.avif)")
        self.jpeg_radio = QRadioButton("JPEG (.jpg)")

        self.webp_radio.setChecked(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é WebP

        self.format_group.addButton(self.heif_radio, 0)
        self.format_group.addButton(self.webp_radio, 1)
        self.format_group.addButton(self.avif_radio, 2)
        self.format_group.addButton(self.jpeg_radio, 3)

        format_layout.addWidget(self.heif_radio)
        format_layout.addWidget(self.webp_radio)
        format_layout.addWidget(self.avif_radio)
        format_layout.addWidget(self.jpeg_radio)
        format_layout.addStretch()

        settings_layout.addLayout(format_layout)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        file_options_group = QGroupBox("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")
        file_options_layout = QVBoxLayout(file_options_group)

        # –ß–µ–∫–±–æ–∫—Å —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.delete_original_checkbox = QRadioButton("üóëÔ∏è –£–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
        self.keep_original_checkbox = QRadioButton("üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
        self.keep_original_checkbox.setChecked(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        self.file_action_group = QButtonGroup()
        self.file_action_group.addButton(self.delete_original_checkbox, 0)
        self.file_action_group.addButton(self.keep_original_checkbox, 1)

        file_options_layout.addWidget(self.delete_original_checkbox)
        file_options_layout.addWidget(self.keep_original_checkbox)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        postfix_layout = QHBoxLayout()
        postfix_layout.addWidget(QLabel("üìù –ü–æ—Å—Ç—Ñ–∏–∫—Å –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:"))
        
        self.postfix_input = QLineEdit("_compressed")
        self.postfix_input.setPlaceholderText("_compressed")
        self.postfix_input.setToolTip("–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è")
        
        postfix_layout.addWidget(self.postfix_input)
        file_options_layout.addLayout(postfix_layout)

        settings_layout.addWidget(file_options_group)
        main_layout.addWidget(settings_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()

        self.start_button = QPushButton("üöÄ –ù–∞—á–∞—Ç—å —Å–∂–∞—Ç–∏–µ")
        self.start_button.setEnabled(False)
        self.start_button.clicked.connect(self.start_compression)
        self.start_button.setStyleSheet(
            """
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """
        )

        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_button.setEnabled(False)
        self.stop_button.clicked.connect(self.stop_compression)
        self.stop_button.setStyleSheet(
            """
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """
        )

        self.clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
        self.clear_button.setEnabled(False)
        self.clear_button.clicked.connect(self.clear_queue)
        self.clear_button.setStyleSheet(
            """
            QPushButton {
                background-color: #f39c12;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """
        )

        buttons_layout.addWidget(self.start_button)
        buttons_layout.addWidget(self.stop_button)
        buttons_layout.addWidget(self.clear_button)
        buttons_layout.addStretch()

        main_layout.addLayout(buttons_layout)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_layout = QVBoxLayout(progress_group)

        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet(
            """
            QProgressBar {
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 3px;
            }
        """
        )
        progress_layout.addWidget(self.progress_bar)

        main_layout.addWidget(progress_group)

        # –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        log_group = QGroupBox("üìù –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        log_layout = QVBoxLayout(log_group)

        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(200)
        self.log_text.setStyleSheet(
            """
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 1px solid #34495e;
                border-radius: 5px;
                padding: 5px;
                font-family: 'Consolas', 'Monaco', monospace;
            }
        """
        )
        log_layout.addWidget(self.log_text)

        main_layout.addWidget(log_group)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def update_quality_label(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."""
        self.quality_label.setText(str(value))

    def handle_dropped_files(self, files):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–Ω–µ –∑–∞–º–µ–Ω—è–µ–º!)
        new_files = []

        for file_path in files:
            if os.path.isfile(file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if file_path.lower().endswith(
                    (".jpg", ".jpeg", ".png", ".heic", ".heif", ".avif")
                ):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
                    if file_path not in self.files_to_process:
                        new_files.append(file_path)
                        self.files_to_process.append(file_path)
            elif os.path.isdir(file_path):
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                for root, _, files_in_dir in os.walk(file_path):
                    for file in files_in_dir:
                        if file.lower().endswith(
                            (".jpg", ".jpeg", ".png", ".heic", ".heif", ".avif")
                        ):
                            full_path = os.path.join(root, file)
                            if full_path not in self.files_to_process:
                                new_files.append(full_path)
                                self.files_to_process.append(full_path)

        if new_files:
            self.start_button.setEnabled(True)
            self.clear_button.setEnabled(True)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
            self.log_text.append(f"üìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(new_files)}")
            self.log_text.append(f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.files_to_process)}")
            self.statusBar().showMessage(
                f"–ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {len(self.files_to_process)} —Ñ–∞–π–ª–æ–≤"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–æ–Ω–µ
            self.drop_zone.label.setText(
                f"üìÅ –í –æ—á–µ—Ä–µ–¥–∏: {len(self.files_to_process)} —Ñ–∞–π–ª–æ–≤"
            )
        else:
            if not self.files_to_process:
                self.start_button.setEnabled(False)
                self.clear_button.setEnabled(False)
                self.log_text.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                self.statusBar().showMessage("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
            else:
                self.log_text.append("‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")

    def get_selected_format(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞."""
        if self.heif_radio.isChecked():
            return "HEIF"
        elif self.webp_radio.isChecked():
            return "WEBP"
        elif self.avif_radio.isChecked():
            return "AVIF"
        elif self.jpeg_radio.isChecked():
            return "JPEG"
        return "WEBP"

    def start_compression(self):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∂–∞—Ç–∏—è."""
        if not self.files_to_process:
            QMessageBox.warning(
                self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        quality = self.quality_slider.value()
        format_type = self.get_selected_format()
        delete_original = self.delete_original_checkbox.isChecked()
        postfix = self.postfix_input.text().strip() or "_compressed"

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.progress_bar.setValue(0)

        # –û—á–∏—â–∞–µ–º –ª–æ–≥
        self.log_text.clear()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        unique_files = list(dict.fromkeys(self.files_to_process))
        duplicate_count = len(self.files_to_process) - len(unique_files)

        self.log_text.append(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ {len(unique_files)} —Ñ–∞–π–ª–æ–≤...")
        if duplicate_count > 0:
            self.log_text.append(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count}")
        self.log_text.append(f"üìã –§–æ—Ä–º–∞—Ç: {format_type}, –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
        self.log_text.append(f"üóëÔ∏è –£–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã: {'–î–∞' if delete_original else '–ù–µ—Ç'}")
        if not delete_original:
            self.log_text.append(f"üìù –ü–æ—Å—Ç—Ñ–∏–∫—Å: {postfix}")
        self.log_text.append("=" * 50)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        unique_files = list(dict.fromkeys(self.files_to_process))
        self.worker = CompressionWorker(unique_files, quality, format_type, delete_original, postfix)
        self.worker.progress_updated.connect(self.progress_bar.setValue)
        self.worker.log_message.connect(self.log_text.append)
        self.worker.finished_processing.connect(self.compression_finished)
        self.worker.start()

        self.statusBar().showMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")

    def stop_compression(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∂–∞—Ç–∏—è."""
        if self.worker and self.worker.isRunning():
            self.worker.cancel()
            self.worker.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞

        self.compression_finished(0, 0, cancelled=True)

    def compression_finished(
        self, successful: int, errors: int, cancelled: bool = False
    ):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∂–∞—Ç–∏—è."""
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

        if cancelled:
            self.log_text.append("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.statusBar().showMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            self.log_text.append("=" * 50)
            self.log_text.append(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.log_text.append(f"üìä –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {errors}")
            self.statusBar().showMessage(
                f"–ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}, –æ—à–∏–±–æ–∫: {errors}"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            QMessageBox.information(
                self,
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful} —Ñ–∞–π–ª–æ–≤\n–û—à–∏–±–æ–∫: {errors}",
            )

    def clear_queue(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ñ–∞–π–ª–æ–≤."""
        self.files_to_process = []
        self.start_button.setEnabled(False)
        self.clear_button.setEnabled(False)
        self.drop_zone.label.setText(
            "üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
        )
        self.log_text.append("üóëÔ∏è –û—á–µ—Ä–µ–¥—å —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω–∞")
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = QApplication(sys.argv)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle("Fusion")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = ImageCompressorGUI()
    window.show()

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
