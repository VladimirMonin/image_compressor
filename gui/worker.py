"""
–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""

import os
from typing import List
from pathlib import Path
from PyQt6.QtCore import QThread, pyqtSignal
from pillow_heif import register_heif_opener

from classes import ImageCompressor
from .utils import get_savings_info


class CompressionWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI."""

    progress_updated = pyqtSignal(int)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    file_processed = pyqtSignal(str)  # –ò–º—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    log_message = pyqtSignal(str)  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
    finished_processing = pyqtSignal(int, int)  # —É—Å–ø–µ—à–Ω—ã—Ö, –æ—à–∏–±–æ–∫

    def __init__(
        self,
        files: List[str],
        quality: int,
        format_type: str,
        delete_original: bool = False,
        postfix: str = "_compressed",
    ):
        super().__init__()
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.files = list(set(files))
        self.quality = quality
        self.format_type = format_type
        self.delete_original = delete_original
        self.postfix = postfix
        self.is_cancelled = False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        successful = 0
        errors = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—â–µ —Ä–∞–∑ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        original_count = len(self.files)
        unique_files = list(dict.fromkeys(self.files))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        total_files = len(unique_files)

        if original_count != total_files:
            duplicates_count = original_count - total_files
            self.log_message.emit(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HEIF –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            register_heif_opener()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
            compressor = ImageCompressor(
                quality=self.quality, output_format=self.format_type
            )

            for i, file_path in enumerate(unique_files):
                if self.is_cancelled:
                    break

                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
                    input_path = Path(file_path)
                    extension = compressor.output_formats[self.format_type]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    input_extension = input_path.suffix.lower()
                    output_extension = extension.lower()

                    if input_extension == output_extension and not self.delete_original:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—Ñ–∏–∫—Å –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
                        base_name = input_path.stem
                        output_path = (
                            input_path.parent / f"{base_name}{self.postfix}{extension}"
                        )
                    else:
                        output_path = input_path.with_suffix(extension)

                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    self.log_message.emit(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {input_path}")
                    self.log_message.emit(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É
                    output_dir = output_path.parent
                    if not os.access(output_dir, os.W_OK):
                        raise PermissionError(
                            f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É: {output_dir}"
                        )

                    # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    compressor.compress_image(str(input_path), str(output_path))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                    if output_path.exists():
                        original_size = input_path.stat().st_size
                        compressed_size = output_path.stat().st_size
                        saved_bytes, saved_percent = get_savings_info(
                            original_size, compressed_size
                        )

                        if saved_percent > 0:
                            self.log_message.emit(
                                f"‚úÖ {input_path.name} -> {output_path.name}"
                            )
                            self.log_message.emit(
                                f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {saved_bytes:,} –±–∞–π—Ç ({saved_percent:.1f}%)"
                            )
                        else:
                            self.log_message.emit(
                                f"‚úÖ {input_path.name} -> {output_path.name} (—Ä–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–∏–ª—Å—è)"
                            )

                        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                        if self.delete_original and input_path != output_path:
                            try:
                                input_path.unlink()
                                self.log_message.emit(
                                    f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {input_path.name}"
                                )
                            except Exception as e:
                                self.log_message.emit(
                                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª {input_path.name}: {str(e)}"
                                )

                        successful += 1
                    else:
                        raise FileNotFoundError(
                            f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: {output_path}"
                        )

                    self.file_processed.emit(input_path.name)

                except Exception as e:
                    errors += 1
                    self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ {Path(file_path).name}: {str(e)}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int(((i + 1) / total_files) * 100)
                self.progress_updated.emit(progress)

        except Exception as e:
            self.log_message.emit(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

        self.finished_processing.emit(successful, errors)

    def cancel(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É."""
        self.is_cancelled = True
