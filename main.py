"""
–ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
pip install pillow pillow-heif pillow-avif-plugin
"""

import os
import time
import multiprocessing as mp
from typing import List, Tuple, Optional
from PIL import Image
from pillow_heif import register_heif_opener

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AVIF
try:
    import pillow_avif
    AVIF_AVAILABLE = True
except ImportError:
    AVIF_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
QUALITY: int = 50
OUTPUT_FORMAT = "WEBP"  # "WEBP", "HEIF" –∏–ª–∏ "AVIF"
SUPPORTED_FORMATS = ('.jpg', '.jpeg', '.png')
OUTPUT_EXTENSIONS = {"WEBP": ".webp", "HEIF": ".heic", "AVIF": ".avif"}


def compress_single_image(args: Tuple[str, str, str, int]) -> Optional[str]:
    """
    –°–∂–∏–º–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ.
    
    Args:
        args: –ö–æ—Ä—Ç–µ–∂ (input_path, output_path, format, quality)
        
    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    input_path, output_path, format_type, quality = args
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–µ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        if format_type == "HEIF":
            register_heif_opener()
        elif format_type == "AVIF" and not AVIF_AVAILABLE:
            return f"–û–®–ò–ë–ö–ê: AVIF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è {input_path}"
            
        with Image.open(input_path) as img:
            img.save(output_path, format_type, quality=quality)
            
        return f"‚úì –°–∂–∞—Ç–æ: {os.path.basename(input_path)} -> {os.path.basename(output_path)}"
        
    except Exception as e:
        return f"‚úó –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {input_path}: {str(e)}"


def collect_image_files(input_path: str) -> List[str]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.
    
    Args:
        input_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    image_files = []
    
    if os.path.isfile(input_path):
        if input_path.lower().endswith(SUPPORTED_FORMATS):
            image_files.append(input_path)
    elif os.path.isdir(input_path):
        for root, _, files in os.walk(input_path):
            for file in files:
                if file.lower().endswith(SUPPORTED_FORMATS):
                    image_files.append(os.path.join(root, file))
    
    return image_files


def prepare_compression_tasks(image_files: List[str], format_type: str, quality: int) -> List[Tuple[str, str, str, int]]:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        image_files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        format_type: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
        quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
        
    Returns:
        List[Tuple]: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è pool.map
    """
    extension = OUTPUT_EXTENSIONS[format_type]
    tasks = []
    
    for input_path in image_files:
        output_path = os.path.splitext(input_path)[0] + extension
        tasks.append((input_path, output_path, format_type, quality))
    
    return tasks


def process_with_multiprocessing(input_path: str, format_type: str = OUTPUT_FORMAT, quality: int = QUALITY) -> None:
    """
    –ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    Args:
        input_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        format_type: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
        quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
    """
    print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤: {input_path}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = collect_image_files(input_path)
    
    if not image_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = prepare_compression_tasks(image_files, format_type, quality)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞)
    num_processes = mp.cpu_count()
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ {num_processes} —è–¥—Ä–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    # –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()
    
    with mp.Pool(processes=num_processes) as pool:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º imap –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        results = []
        for i, result in enumerate(pool.imap(compress_single_image, tasks), 1):
            if result:
                print(f"[{i:4d}/{len(tasks)}] {result}")
            results.append(result)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    successful = sum(1 for r in results if r and r.startswith("‚úì"))
    failed = sum(1 for r in results if r and r.startswith("‚úó"))
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –û –û–ë–†–ê–ë–û–¢–ö–ï:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(image_files)/processing_time:.2f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫")
    print("="*60)


def get_user_format_choice() -> str:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å–∂–∞—Ç–∏—è.
    
    Returns:
        str: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–∂–∞—Ç–∏—è:")
    print("1. WEBP (.webp) - –æ—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ")
    print("2. HEIF (.heic) - –≤—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è")
    
    if AVIF_AVAILABLE:
        print("3. AVIF (.avif) - –Ω–æ–≤–µ–π—à–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º")
        
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (1-3) –∏–ª–∏ Enter –¥–ª—è WEBP: ").strip()
    
    if choice == "2":
        return "HEIF"
    elif choice == "3" and AVIF_AVAILABLE:
        return "AVIF"
    else:
        return "WEBP"


def get_user_quality() -> int:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è.
    
    Returns:
        int: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (0-100)
    """
    while True:
        quality_input = input(f"\n–í–≤–µ–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ (0-100) –∏–ª–∏ Enter –¥–ª—è {QUALITY}: ").strip()
        
        if not quality_input:
            return QUALITY
            
        try:
            quality = int(quality_input)
            if 0 <= quality <= 100:
                return quality
            else:
                print("‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
    """
    print("üñºÔ∏è  === –ú–ù–û–ì–û–ü–†–û–¶–ï–°–°–û–†–ù–´–ô –ö–û–ú–ü–†–ï–°–°–û–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===")
    print("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
    
    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    format_choice = get_user_format_choice()
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {format_choice}")
    
    # –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
    quality_choice = get_user_quality()
    print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_choice}")
    
    # –í–≤–æ–¥ –ø—É—Ç–∏
    user_input = input("\nüìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ").strip().strip('"')
    
    if not os.path.exists(user_input):
        print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    print(f"\nüéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   üìÅ –ü—É—Ç—å: {user_input}")
    print(f"   üé® –§–æ—Ä–º–∞—Ç: {format_choice}")
    print(f"   üîß –ö–∞—á–µ—Å—Ç–≤–æ: {quality_choice}")
    print(f"   üíª –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {mp.cpu_count()}")
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    process_with_multiprocessing(user_input, format_choice, quality_choice)
    
    input("\n‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã multiprocessing –Ω–∞ Windows
    mp.freeze_support()
    main()